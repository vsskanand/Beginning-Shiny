my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
swirl()
1:20
pi:20
pi:10
15:1
:
':'
`:`
":"
?`:`
seq(1:20)
seq(1, 20)
seq(0, 10, by=0.5)
my_seq<-seq(5, 10, length=30)
my_seq
length(my_seq)
1:length(my_Seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep()
rep(10, times = 40)
rep(0, times = 40)
vector(0, 1, 2)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
?vector
vector(0.5, 55, -10, 6)
num_vect(0.5, 55, -10, 6)
vector num_vect(0.5, 55, -10, 6)
num_vect(0.5, 55, -10, 6)
num_vect<-num_vect(0.5, 55, -10, 6)
num_vect<-vector(0.5, 55, -10, 6)
num_vect<-vector(0.5)
num_vect(0.5)
num_vect<-c(0.5, 55, -10, 6)
num_vect
tf < num_vect<1
tf < num_vect < 1
tf <- num_vect < 1
num_vect
num_vect < 1
tf
tf <- num_vect >= 6
num_vect >= 6
my_char<-c(My, name, is)
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Ganesh")
my_name<-c(my_char, "Ganesh")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
c("X", "Y", "Z")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- 4L
x
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
rbind(x,y)
x <- list(2,"a","b",TRUE)
x[[2]]
1:2
x<-1:4
y<-2
x+y
x <- c(3,5,1,10,12,6)
x[x <= 5] <- 0
x
x <- c(3,5,1,10,12,6)
x[x != 6] <- 0
x
x <- c(3,5,1,10,12,6)
x[x == 0]<-6
x
x[x>0]<-6
x
*** Data Science Specialization #
#
* Uses R #
* Nine courses #
* Goes from raw data to data products
##Data Science Specialization #
#
* Uses R #
* Nine courses #
* Goes from raw data to data products
###Data Science Specialization #
#
* Uses R #
* Nine courses #
* Goes from raw data to data products
##data
*1
*data
##data
li 1
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(w*x)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
yc <- y - mean(y)
xc <- x - mean(x)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(y ~ x))[2])
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
lm(x~1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)#
xn <- (x - mean(x))/sd(x)#
xn[1]
library(datasets)#
data(mtcars)#
mtcars$mpg#
yc <- mtcars$mpg - mean(mtcars$mpg)#
xc <- mtcars$wt - mean(mtcars$wt)#
beta1 <- sum(yc * xc) / sum(xc ^ 2)#
c(beta1, coef(lm(mtcars$mpg ~ mtcars$wt))[2])
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)#
xc<-(x-mean(x))/sd(x)#
xc
.51/.5
cube <- function(x, n) {#
        x^3#
}
cube(3)
x <- 1:10#
if(x > 5) {#
        x <- 0#
}
f <- function(x) {#
        g <- function(y) {#
                y + z#
        }#
        z <- 4#
        x + g(x)#
}
z<-10
f(3)
x <- 5#
y <- if(x < 3) {#
        NA#
} else {#
        10#
}
y
h <- function(x, y = NULL, d = 3L) {#
        z <- cbind(x, d)#
        if(!is.null(y))#
                z <- z + y#
        else#
                z <- z + f#
        g <- x + y / z#
        if(d == 3L)#
                return(g)#
        g <- g + 10#
        g#
}
f
h
z
d
L
g
swirl
swirl()
library(datasets)#
data(iris)
?iris
Sepal.Length
library("swirl")
swirl()
1
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na()
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(1)
c(3, 5, 7)
x <- c(3, 5, 7)
x <- [c(3, 5, 7)]
x <- c[c(3, 5, 7)]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[c(-2, 10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
2
1
vect["bar"]
vect[c("foo", "bar")]
my_vector[1:20]
my_vector(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
x<-10
x
cat('Hello, world!\n')
cat('Hello, world! in R language\n')
cat('Hello, world!\n')
install.packages("ggvis")
weather <- read.table(text="#
outlook temperature humidity wind play#
1 sunny hot high normal no#
2 sunny hot high high no#
3 overcast hot high normal yes#
4 rainy mild high normal yes#
5 rainy cold normal normal yes#
6 rainy cold normal high no#
7 overcast cold normal high yes#
8 sunny mild high normal no#
9 sunny cold normal normal yes#
10 rainy mild normal normal yes#
11 sunny mild normal high yes#
12 overcast mild high high yes
13 overcast hot normal normal yes#
14 rainy mild high high no")
summary(weather)
weatherr <- read.table(text="#
outlook temperature humidity wind playability#
1 sunny 27 80 normal 0.48#
2 sunny 28 65 high 0.46#
3 overcast 29 90 normal 0.68#
4 rainy 21 75 normal 0.52#
5 rainy 17 40 normal 0.54#
6 rainy 15 25 high 0.47#
7 overcast 19 50 high 0.74#
8 sunny 22 95 normal 0.49#
9 sunny 18 45 normal 0.64#
10 rainy 23 30 normal 0.55#
11 sunny 24 55 high 0.57#
12 overcast 25 70 high 0.68#
13 overcast 30 35 normal 0.79#
14 rainy 26 85 high 0.33")#
summary(weatherr)
weathercl <- weatherc[,-5]
weathercl <- weatherr[,-5]
weathercl
data(weather, package="dmr.data")#
data(weatherc, package="dmr.data")#
data(weatherr, package="dmr.data")
weatherc <- read.table(text="#
outlook temperature humidity wind play#
1 sunny 27 80 normal no#
2 sunny 28 65 high no#
3 overcast 29 90 normal yes#
4 rainy 21 75 normal yes#
5 rainy 17 40 normal yes#
6 rainy 15 25 high no#
7 overcast 19 50 high yes#
8 sunny 22 95 normal no#
9 sunny 18 45 normal yes#
10 rainy 23 30 normal yes#
11 sunny 24 55 high yes#
12 overcast 25 70 high yes#
13 overcast 30 35 normal yes#
14 rainy 26 85 high no")#
summary(weatherc)
bs.mean <- function(v) { sum(v)/length(v) }#
# demonstration#
bs.mean(weatherc$temperature)#
mean(weatherc$temperature)
bs.median <- function(v)#
{#
k1 <- (m <- length(v))%/%2+1#
k2 <- (m+1)%/%2#
((v <- sort(v))[k1]+v[k2])/2#
}#
# demonstration#
bs.median(weatherc$temperature)#
bs.median(weatherc$temperature[weatherc$play=="yes"])#
median(weatherc$temperature)#
median(weatherc$temperature[weatherc$play=="yes"])
weighted.median <- function(v, w=rep(1, length(v)))#
{#
v <- v[ord <- order(v)]#
w <- w[ord]#
tw <- (sw <- cumsum(w))[length(sw)]mean(v[which(sw>=0.5*tw & tw-shift.right(sw, 0)>=0.5*tw)])#
}#
# demonstration#
weighted.median(weatherc$temperature, ifelse(weatherc$play=="yes", 5, 1))#
median(c(weatherc$temperature[weatherc$play=="no"],#
rep(weatherc$temperature[weatherc$play=="yes"], 5)))#
weighted.median(weatherc$temperature, ifelse(weatherc$play=="yes", 0.2, 1))#
median(c(weatherc$temperature[weatherc$play=="yes"],#
rep(weatherc$temperature[weatherc$play=="no"], 5)))
bs.median <- function(v)#
{#
k1 <- (m <- length(v))%/%2+1#
k2 <- (m+1)%/%2#
((v <- sort(v))[k1]+v[k2])/2#
}#
# demonstration#
bs.median(weatherc$temperature)#
bs.median(weatherc$temperature[weatherc$play=="yes"])#
median(weatherc$temperature)#
median(weatherc$temperature[weatherc$play=="yes"])
bs.median <- function(v)#
{#
k1 <- (m <- length(v))%/%2+1#
k2 <- (m+1)%/%2#
((v <- sort(v))[k1]+v[k2])/2#
}#
# demonstration#
bs.median(weatherc$temperature)#
bs.median(weatherc$temperature[weatherc$play=="yes"])#
median(weatherc$temperature)#
median(weatherc$temperature[weatherc$play=="yes"])  mean(v[which(sw>=0.5*tw & tw-shift.right(sw, 0)>=0.5*tw)])#
}#
# demonstration#
weighted.median(weatherc$temperature, ifelse(weatherc$play=="yes", 5, 1))#
median(c(weatherc$temperature[weatherc$play=="no"],#
rep(weatherc$temperature[weatherc$play=="yes"], 5)))#
weighted.median(weatherc$temperature, ifelse(weatherc$play=="yes", 0.2, 1))#
median(c(weatherc$temperature[weatherc$play=="yes"],#
rep(weatherc$temperature[weatherc$play=="no"], 5)))
weighted.median <- function(v, w=rep(1, length(v))) #
{ #
v <- v[ord <- order(v)] #
w <- w[ord] #
tw <- (sw <- cumsum(w))[length(sw)]#
mean(v[which(sw>=0.5*tw & tw-shift.right(sw, 0)>=0.5*tw)]) #
} #
# demonstration weighted.median(weatherc$temperature, ifelse(weatherc$play=="yes", 5, 1)) #
median(c(weatherc$temperature[weatherc$play=="no"], 		#
			rep(weatherc$temperature[weatherc$play=="yes"], 5))) #
weighted.median(weatherc$temperature, ifelse(weatherc$play=="yes", 0.2, 1)) #
median(c(weatherc$temperature[weatherc$play=="yes"], #
rep(weatherc$temperature[weatherc$play=="no"], 5)))
ord <- function(v, k=1:length(v))#
{#
sort(v)[k]#
}#
# demonstration#
ord(weatherr$playability, 11)#
weatherr$playability[rank(weatherr$playability, ties.method="first")==11]#
ord(weatherr$playability, 10:13)#
weatherr$playability[rank(weatherr$playability, ties.method="first") %in% 10:13]
bs.quantile <- function(v, p=c(0, 0.25, 0.5, 0.75, 1))#
{#
b <- 1-p#
k <- floor((ps <- p*length(v))+b)#
beta <- ps+b-k#
‘names<-‘((1-beta)*(v <- sort(v))[k]+beta*(ifelse(k<length(v), v[k+1], v[k])), p)#
}#
# demonstration#
bs.quantile(weatherc$temperature)#
quantile(weatherc$temperature)#
bs.quantile(weatherc$temperature[weatherc$play=="yes"])#
quantile(weatherc$temperature[weatherc$play=="yes"])
bs.var <- function(v) { sum((v-mean(v))̂2)/(length(v)-1) }#
# demonstration#
bs.var(weatherr$playability)#
var(weatherr$playability)
## variance that returns 0 for 1-element vectors and NaN for empty vectors#
var1 <- function(v) { switch(min(length(v), 2)+1, NaN, 0, var(v)) }#
# demonstration#
var1(1:2)#
var1(1)#
var1(weatherr$temperature[weatherr$playability<0.75])#
var1(weatherr$temperature[weatherr$playability>=0.75])#
var1(weatherr$temperature[weatherr$playability>=0.8])
weighted.var <- function(v, w=rep(1, length(v)))#
{#
sw <- sum(w)#
ssw <- sum(ŵ2)#
wm <- weighted.mean(v, w)#
sw/(sŵ2-ssw)*sum(w*(v-wm)̂2)#
}#
# demonstration#
weighted.var(weatherr$playability)#
weighted.var(weatherr$playability, ifelse(weatherr$outlook=="rainy", 2, 1))
## weighted variance that returns 0 for 1-element vectors and NaN for empty vectors#
weighted.var1 <- function(v, w=rep(1, length(w)))#
{ switch(min(length(v), 2)+1, NaN, 0, weighted.var(v, w)) }#
# demonstration#
weighted.var1(1:2, 1:2)#
weighted.var1(1, 2)#
weighted.var1(weatherr$temperature[weatherr$playability<0.75],#
weatherr$playability[weatherr$playability<0.75])#
weighted.var1(weatherr$temperature[weatherr$playability>=0.75],#
weatherr$playability[weatherr$playability>=0.75])#
weighted.var1(weatherr$temperature[weatherr$playability>=0.8],#
weatherr$playability[weatherr$playability>=0.8])
bs.sd <- function(v) { sqrt(sum((v-mean(v))̂2)/(length(v)-1)) }#
# demonstration#
bs.sd(weatherr$playability)#
sd(weatherr$playability)
varcoef <- function(v) { sqrt(sum((v-(m <- mean(v)))̂2)/(length(v)-1))/m }#
# demonstration#
varcoef(weatherr$playability)#
varcoef(-weatherr$playability)
rm(list=ls())
hi
print hi
2+2
x = rnorm(1, m1, s1)
getpwd()
getpd()
pwd()
getwd()
counties <- readRDS("Lesson 5/data/counties.rds")
head(counties)
install.packages(c("maps", "mapproj"))
runApp("Lesson 5")
library(shiny)
runApp("Lesson 5")
